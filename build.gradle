import com.gtnewhorizons.retrofuturagradle.mcp.InjectTagsTask
import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'scala'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.4.2'
}

apply from: 'gradle/scripts/helpers.gradle'
apply from: 'gradle/scripts/publishing.gradle'
apply from: 'gradle/scripts/extra.gradle'
apply from: 'gradle/scripts/dependencies.gradle'

version = propertyString('mod_version')
group = propertyString('root_package')

tasks.decompressDecompiledSources.enabled !propertyBool('change_minecraft_sources')

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion.set('1.12.2')

    mcpMappingChannel.set(propertyString('mapping_channel'))
    mcpMappingVersion.set(propertyString('mapping_version'))
    useDependencyAccessTransformers.set(propertyBool('use_dependency_at_files'))

    username.set(propertyString('minecraft_username'))

    // Add various JVM arguments here for runtime
    def args = ['-ea:' + group]
    if (propertyBool('use_mixins')) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }
    extraRunJvmArguments.addAll(args)
    extraRunJvmArguments.addAll(propertyStringList('extra_jvm_args'))

    if (propertyBool('use_tags')) {
        if (file('tags.properties').exists()) {
            Properties props = new Properties().tap { it.load(file('tags.properties').newInputStream()); it }
            if (!props.isEmpty()) {
                injectedTags.set(props.collectEntries { k, v -> [(k): interpolate(v)] })
            }
        }
    }
}
dependencies {
    if (propertyBool('use_modern_java_syntax')) {
        annotationProcessor 'net.java.dev.jna:jna-platform:5.13.0'
        // Allow jdk.unsupported classes like sun.misc.Unsafe, workaround for JDK-8206937 and fixes crashes in tests
        patchedMinecraft 'me.eigenraven.java8unsupported:java-8-unsupported-shim:1.0.0'
    }
    if (propertyBool('use_asset_mover')) {
        implementation "com.cleanroommc:assetmover:${propertyString('asset_mover_version')}"
    }
    if (propertyBool('use_mixins')) {
        String mixin = modUtils.enableMixins("zone.rong:mixinbooter:${propertyString('mixin_booter_version')}", propertyString('mixin_refmap'))
        api(mixin) {
            transitive = false
        }
        annotationProcessor 'org.ow2.asm:asm-debug-all:5.2'
        annotationProcessor 'com.google.guava:guava:33.4.0-jre'
        annotationProcessor 'com.google.code.gson:gson:2.8.6'
        annotationProcessor(mixin) {
            transitive = false
        }
    }
}

// Adds Access Transformer files to tasks
if (propertyBool('use_access_transformer')) {
    for (def location : propertyStringList('access_transformer_locations')) {
        def fileLocation = file("${projectDir}/src/main/resources/${location}")
        if (fileLocation.exists()) {
            tasks.deobfuscateMergedJarToSrg.accessTransformerFiles.from(fileLocation)
            tasks.srgifyBinpatchedJar.accessTransformerFiles.from(fileLocation)
        } else {
            throw new GradleException("Access Transformer file [$fileLocation] does not exist!")
        }
    }
}

processResources {
    def filterList = ['mcmod.info', 'pack.mcmeta']
    filterList.addAll(propertyStringList('mixin_configs').collect(config -> "mixins.${config}.json" as String))

    filesMatching(filterList) { fcd ->
        fcd.expand('mod_id': propertyString('mod_id'),
                'mod_name': propertyString('mod_name'),
                'mod_version': propertyString('mod_version'),
                'mod_description': propertyString('mod_description'),
                'mod_authors': "${propertyStringList('mod_authors', ',').join(', ')}",
                'mod_credits': propertyString('mod_credits'),
                'mod_url': propertyString('mod_url'),
                'mod_update_json': propertyString('mod_update_json'),
                'mod_logo_path': propertyString('mod_logo_path'),
                'mixin_refmap': propertyString('mixin_refmap'),
                'mixin_package': propertyString('mixin_package'))
    }

    if (propertyBool('use_access_transformer')) {
        rename '(.+_at.cfg)', 'META-INF/$1'
    }
}

jar {
    archiveBaseName = mod_name
    archiveVersion = mod_version + "-Java" + JavaVersion.current().toString()

    manifest {
        attributes('FMLCorePluginContainsFMLMod': true,
                'FMLCorePlugin': 'cn.lambdalib2.CorePlugin')
    }
}

tasks.register('generateMixinJson') {
    group 'cleanroom helpers'
    def missingConfig = propertyStringList('mixin_configs').findAll(config -> !file("src/main/resources/mixins.${config}.json").exists())
    onlyIf {
        if (propertyBool('use_mixins') && propertyBool('generate_mixins_json')) {
            return !missingConfig.empty
        }
        return false
    }
    doLast {
        for (String mixinConfig : missingConfig) {
            def file = file("src/main/resources/mixins.${mixinConfig}.json")
            file << """{\n\t"package": "",\n\t"required": true,\n\t"refmap": "${propertyString('mixin_refmap')}",\n\t"target": "@env(DEFAULT)",\n\t"minVersion": "0.8.5",\n\t"compatibilityLevel": "JAVA_8",\n\t"mixins": [],\n\t"server": [],\n\t"client": []\n}"""
        }
    }
}

tasks.named('injectTags', InjectTagsTask).configure {
    onlyIf {
        return propertyBool('use_tags') && !it.getTags().get().isEmpty()
    }
    it.outputClassName.set(propertyString('tag_class_name'))
}

tasks.named('prepareObfModsFolder').configure {
    finalizedBy 'prioritizeCoremods'
}

tasks.register('prioritizeCoremods') {
    dependsOn 'prepareObfModsFolder'
    doLast {
        fileTree('run/obfuscated').forEach {
            if (it.isFile() && it.name =~ '(mixinbooter|configanytime)(-)([0-9])+\\.+([0-9])+(.jar)') {
                it.renameTo(new File(it.parentFile, "!${it.name}"))
            }
        }
    }
}

tasks.withType(ScalaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets.main {
    java.srcDirs = []
    scala.srcDirs = ['src/main/scala', 'src/main/java']
}

idea {
    module {
        sourceDirs = [file('src/main/java'), file('src/main/scala')]
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [(project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')]
                }
            }
        }
    }
}

idea.project.settings {
    taskTriggers {
        afterSync 'cleanroomAfterSync'
    }
}

tasks.register('cleanroomAfterSync') {
    group 'cleanroom helpers'
    dependsOn 'injectTags', 'generateMixinJson'
}

tasks.named('injectTags', InjectTagsTask).configure {
    onlyIf {
        return propertyBool('use_tags') && !it.getTags().get().isEmpty()
    }
    it.outputClassName.set(propertyString('tag_class_name'))
}